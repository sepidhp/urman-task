plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
}

android {
    compileSdkVersion rootProject.ext.androidCompileSdkVersion

    buildFeatures {
        dataBinding true
    }
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.utechia.task"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
        //signingConfig signingConfigs.config
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true
            applicationIdSuffix ".debug"
            versionNameSuffix "-DEBUG"
            signingConfig android.signingConfigs.debug

        }
        release {
            minifyEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            Properties properties = new Properties()
            if (rootProject.file("local.properties").exists()) {
                properties.load(rootProject.file("local.properties").newDataInputStream())
            }

            // Inject the Maps API key into the manifest
            //manifestPlaceholders = [ mapsApiKey : properties.getProperty("MAPS_API_KEY", "") ]
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation project(':domain')
    implementation project(':data')
    implementation project(':presentation')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "androidx.core:core-ktx:$coreKtxVersion"
    implementation "androidx.multidex:multidex:$multidexVersion"
    //android
    //noinspection GradleDependency
    implementation "com.google.android.material:material:$materialVersion"

    implementation "androidx.fragment:fragment-ktx:$fragmentExtVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"
    implementation "androidx.multidex:multidex:$multidexVersion"
    implementation platform("com.google.firebase:firebase-bom:$firebaseBomVersion")
    //dependency injection
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-android-compiler:$hiltVersion"
    kapt "androidx.hilt:hilt-compiler:$hiltExtVersion"
    kapt "com.google.dagger:hilt-android-compiler:$hiltVersion"
    implementation "javax.inject:javax.inject:$javaxInjectVersion"
    //network
    implementation "com.squareup.retrofit2:retrofit:$retrofit2Version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit2Version"

    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpLoggingVersion"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$coroutinesRetrofitAdapterVersion"
    //other
    implementation "com.jakewharton.timber:timber:$timberVersion"
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"
    // io socket
    implementation ('io.socket:socket.io-client:2.0.0') {
        exclude group: 'org.json', module: 'json'
    }
}

kapt {
    correctErrorTypes true
}